NDefines.NGame.START_DATE = "1991.1.1.12"
NDefines.NGame.END_DATE = "2030.1.1.1"
NDefines.NGame.MAP_SCALE_PIXEL_TO_KM = 0.514
NDefines.NGame.SAVE_VERSION = 24
NDefines.NGame.HANDS_OFF_START_TAG = "TUR"		-- tag for player country for -hands_off runs. use an existing tag that is less likely to affect the game
NDefines.NGame.TRADE_ROUTE_RECALCULATE_FREQUENCY_DAYS = 30 
NDefines.NSupply.VP_TO_SUPPLY_BONUS_CONVERSION = 0.05			-- Bonus to supply local supplies from Victory Points multiplied by this aspect and rounded to closest integer
NDefines.NSupply.SUPPLY_FROM_DAMAGED_INFRA = 0.4                -- was 0.15 damaged infrastructure counts as this in supply calcs
NDefines.NFocus.FOCUS_POINT_DAYS = 1               -- focus continious in days
NDefines.NBuildings.RADAR_RANGE_BASE = 285				-- Radar range base first level radar will be this + min best radar will be this + max
NDefines.NBuildings.RADAR_RANGE_MIN = 315				-- Radar range (from state center to province center) in measure of map pixels. Exluding techs.
NDefines.NBuildings.RADAR_RANGE_MAX = 1000				-- Range is interpolated between building levels 1-15.
NDefines.NBuildings.MAX_BUILDING_LEVELS = 25			-- Max levels a building can have.
NDefines.NBuildings.MAX_SHARED_SLOTS = 25			-- Max slots shared by factories
NDefines.NDiplomacy.VOLUNTEERS_TRANSFER_SPEED = 5					-- days to transfer a unit to another nation
NDefines.NDiplomacy.TENSION_TIME_SCALE_START_DATE = "1991.1.1.12"	-- Starting at this date the tension values will be scaled down (will be equal to 1 before that)
NDefines.NDiplomacy.PEACE_SCORE_SCALE_FACTOR = 1.40                -- Losers' total value times this factor becomes the default total peace conference score that is distributed to the winners.
NDefines.NResistance.GARRISON_MANPOWER_LOST_BY_ATTACK = 0.012 	-- Ratio of manpower lost by garrison at each attack on garrison (this number will be reduced by the hardness of garrison template)
NDefines.NSupply.VP_TO_SUPPLY_BASE = 0.2							-- Bonus to supply from a VP no matter the level
NDefines.NSupply.VP_TO_SUPPLY_BONUS_CONVERSION = 0.05			-- Bonus to supply local supplies from Victory Points multiplied by this aspect and rounded to closest integer
NDefines.NAir.AIR_WING_MAX_STATS_ATTACK = 500 -- 100
NDefines.NAir.AIR_WING_MAX_STATS_DEFENCE = 500 -- 100
NDefines.NAir.AIR_WING_MAX_STATS_AGILITY = 500 -- 100
NDefines.NAir.AIR_WING_MAX_STATS_SPEED = 3000 -- 800
NDefines.NAir.AIR_WING_MAX_STATS_BOMBING = 1000 -- 100
NDefines.NMilitary.WAR_SCORE_AIR_IC_LOSS_FACTOR = 0.1							-- war score gained for every IC of damage done to an enemy's air mission
NDefines.NMilitary.WAR_SCORE_LAND_DAMAGE_FACTOR = 0.1          				-- war score gained for every strengh damage done to an enemy's army
NDefines.NMilitary.WAR_SCORE_ATTACKER_AND_WINNER_FACTOR = 1.2					-- factor applied to war score gained for strength damage done when being the attacker and the winner
NDefines.NMilitary.WAR_SCORE_LAND_IC_LOSS_FACTOR = 0.1         				-- war score gained for every IC damage done to an enemy's army
NDefines.NMilitary.WAR_SCORE_PROVINCE_FACTOR = 2.0							-- war score gained when capturing a province for the first time multiplied by province's worth
NDefines.NMilitary.WAR_SCORE_LEND_LEASE_GIVEN_IC_FACTOR = 0.001  				-- war score gained for every IC of lend lease sent to allies
NDefines.NMilitary.WAR_SCORE_LEND_LEASE_GIVEN_FUEL_FACTOR = 0.001  			-- war score gained for every 100 units of fuel lend lease sent to allies
NDefines.NMilitary.WAR_SCORE_LEND_LEASE_RECEIVED_IC_FACTOR = 0.001  			-- war score deducted for every IC of lend lease received from allies
NDefines.NMilitary.WAR_SCORE_LEND_LEASE_RECEIVED_FUEL_FACTOR = 0.001 		-- war score deducted for every 100 units of fuel lend lease received from allies
NDefines.NMilitary.CORPS_COMMANDER_DIVISIONS_CAP = 35			-- how many divisions a corps commander is limited to. 0 = inf < 0 = blocked
NDefines.NMilitary.INFRA_ORG_IMPACT = 0.5				-- scale factor of infra on org regain.
NDefines.NMilitary.COMBAT_MOVEMENT_SPEED = 0.33	               -- vanila 0.33 speed reduction base modifier in combat
NDefines.NMilitary.SUPPLY_USE_FACTOR_MOVING = 1.5                -- Deprecated/Unused
NDefines.NMilitary.SUPPLY_USE_FACTOR_INACTIVE = 0.95			   -- Deprecated/Unused
NDefines.NMilitary.LAND_SPEED_MODIFIER = 0.45                    -- vanila 0.5 basic speed control
NDefines.NMilitary.FUEL_CAPACITY_DEFAULT_HOURS = 96 -- 96 vanilla default capacity if not specified	
NDefines.NMilitary.ATTRITION_DAMAGE_ORG = 0.08					   -- vanila 0.08 damage from exhaustion of the Organization
NDefines.NMilitary.ATTRITION_EQUIPMENT_LOSS_CHANCE = 0.025		    -- #0.1 Chance for loosing equipment when suffer attrition. Scaled up the stronger attrition is. Then scaled down by equipment reliability.
NDefines.NMilitary.ATTRITION_EQUIPMENT_PER_TYPE_LOSS_CHANCE = 0.025 -- #0.1  Chance for loosing equipment when suffer attrition. Scaled up the stronger attrition is. Then scaled down by equipment reliability.
NDefines.NSupply.CAPITAL_SUPPLY_BASE = 10.0 -- vanilla 5.0 base supply for capital
NDefines.NSupply.CAPITAL_SUPPLY_CIVILIAN_FACTORIES = 0.5 -- vannila 0.3 supply from one civilian factory #
NDefines.NSupply.CAPITAL_SUPPLY_MILITARY_FACTORIES = 0.8 -- vannila 0.6 supply from one military factory
NDefines.NSupply.CAPITAL_SUPPLY_DOCKYARDS = 0.65 -- #was 0.4 supply from one naval factory
-- defines that are used for supply reach for capital
-- supply flow will start from INITIAL_SUPPLY_FLOW and will be reduced by a penalty on each province it travels (which depends on how far we are from our origin terrain etc)
-- a supply reach >= 1.0 considered "perfect" and will be able to fully support units on that particular province (assuming you are not over capacity)
NDefines.NSupply.CAPITAL_INITIAL_SUPPLY_FLOW = 7.0 -- #was 5.0 starting supply from
NDefines.NSupply.CAPITAL_STARTING_PENALTY_PER_PROVINCE = 0.65 --#was 0.5  starting penalty that will be added as supply moves away from its origin (modified by stuff like terrain)
NDefines.NSupply.CAPITAL_ADDED_PENALTY_PER_PROVINCE = 0.7 -- #was 1.2 added penalty as we move away from origin
-- defines that are used for supply reach for built nodes
NDefines.NSupply.NODE_INITIAL_SUPPLY_FLOW = 4.5 -- #was 2.8
NDefines.NSupply.NODE_STARTING_PENALTY_PER_PROVINCE = 0.4 -- #was 0.50
NDefines.NSupply.NODE_ADDED_PENALTY_PER_PROVINCE = 0.40  -- #was 0.70
-- defines that are used for supply reach for dockyards
NDefines.NSupply.NAVAL_BASE_INITIAL_SUPPLY_FLOW = 6.0 -- #was 3.3
NDefines.NSupply.NAVAL_BASE_STARTING_PENALTY_PER_PROVINCE = 0.55 -- #was 0.84
NDefines.NSupply.NAVAL_BASE_ADDED_PENALTY_PER_PROVINCE = 1.1 -- #was 1.1
NDefines.NSupply.SUPPLY_FLOW_PENALTY_CROSSING_RIVERS = 0.40 -- #was 0.20 crossing rivers introduces additional penalty
NDefines.NSupply.SUPPLY_HUB_FULL_MOTORIZATION_BONUS = 3.2     ---vanilla 2.2
-- How many trucks does it cost to fully motorize a hub
NDefines.NSupply.SUPPLY_HUB_FULL_MOTORIZATION_TRUCK_COST = 180.0
NDefines.NSupply.RAILWAY_BASE_FLOW = 15.0 		-- #was 10.0 how much base flow railway gives when a node connected to its capital/a naval node by a railway
NDefines.NSupply.RAILWAY_FLOW_PER_LEVEL = 10.0 	--  #was 10.0 how much additional flow a railway level gives
NDefines.NSupply.RAILWAY_FLOW_PENALTY_PER_DAMAGED = 10.5  --   #was 5.0 penalty to flow per damaged railway
NDefines.NSupply.RAILWAY_MIN_FLOW = 2.5 		-- #was 5.0 	minimum railway flow can be reduced to